{"ast":null,"code":"import axios from \"axios\";\n\n// Make sure your REACT_APP_API_URL ends without /api\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  // Base URL without /api\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Attach token to every request automatically\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\"); // token from login\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization"],"sources":["C:/Users/AK/OneDrive/Attachments/Desktop/CRM/flow-crm/frontend/src/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Make sure your REACT_APP_API_URL ends without /api\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL, // Base URL without /api\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// Attach token to every request automatically\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem(\"token\"); // token from login\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EAAE;EACvBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAC7C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,eAAeP,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}