{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AK\\\\OneDrive\\\\Attachments\\\\Desktop\\\\CRM\\\\flow-crm\\\\frontend\\\\src\\\\Context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const navigate = useNavigate();\n  const login = (userData, tokenData) => {\n    if (!userData || !tokenData) throw new Error(\"Invalid login response\");\n    setUser(userData);\n    setToken(tokenData);\n\n    // store in localStorage so refresh won't log out\n    localStorage.setItem(\"crm_user\", JSON.stringify(userData));\n    localStorage.setItem(\"crm_token\", tokenData);\n\n    // redirect based on role\n    if (userData.role === \"admin\") navigate(\"/admin\");else navigate(\"/user\");\n  };\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem(\"crm_user\");\n    localStorage.removeItem(\"crm_token\");\n    navigate(\"/login\");\n  };\n\n  // Auto-login from localStorage\n  const loadUserFromStorage = () => {\n    const storedUser = localStorage.getItem(\"crm_user\");\n    const storedToken = localStorage.getItem(\"crm_token\");\n    if (storedUser && storedToken) {\n      setUser(JSON.parse(storedUser));\n      setToken(storedToken);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      login,\n      logout,\n      loadUserFromStorage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"QTTfX0bdTHas6xpicqrXs4HKODU=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useNavigate","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","token","setToken","navigate","login","userData","tokenData","Error","localStorage","setItem","JSON","stringify","role","logout","removeItem","loadUserFromStorage","storedUser","getItem","storedToken","parse","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/AK/OneDrive/Attachments/Desktop/CRM/flow-crm/frontend/src/Context/AuthContext.jsx"],"sourcesContent":["import { createContext, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  const login = (userData, tokenData) => {\r\n    if (!userData || !tokenData) throw new Error(\"Invalid login response\");\r\n\r\n    setUser(userData);\r\n    setToken(tokenData);\r\n\r\n    // store in localStorage so refresh won't log out\r\n    localStorage.setItem(\"crm_user\", JSON.stringify(userData));\r\n    localStorage.setItem(\"crm_token\", tokenData);\r\n\r\n    // redirect based on role\r\n    if (userData.role === \"admin\") navigate(\"/admin\");\r\n    else navigate(\"/user\");\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setToken(null);\r\n    localStorage.removeItem(\"crm_user\");\r\n    localStorage.removeItem(\"crm_token\");\r\n    navigate(\"/login\");\r\n  };\r\n\r\n  // Auto-login from localStorage\r\n  const loadUserFromStorage = () => {\r\n    const storedUser = localStorage.getItem(\"crm_user\");\r\n    const storedToken = localStorage.getItem(\"crm_token\");\r\n    if (storedUser && storedToken) {\r\n      setUser(JSON.parse(storedUser));\r\n      setToken(storedToken);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, token, login, logout, loadUserFromStorage }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAMY,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAE9B,MAAMY,KAAK,GAAGA,CAACC,QAAQ,EAAEC,SAAS,KAAK;IACrC,IAAI,CAACD,QAAQ,IAAI,CAACC,SAAS,EAAE,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAEtEP,OAAO,CAACK,QAAQ,CAAC;IACjBH,QAAQ,CAACI,SAAS,CAAC;;IAEnB;IACAE,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAAC,CAAC;IAC1DG,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEH,SAAS,CAAC;;IAE5C;IACA,IAAID,QAAQ,CAACO,IAAI,KAAK,OAAO,EAAET,QAAQ,CAAC,QAAQ,CAAC,CAAC,KAC7CA,QAAQ,CAAC,OAAO,CAAC;EACxB,CAAC;EAED,MAAMU,MAAM,GAAGA,CAAA,KAAM;IACnBb,OAAO,CAAC,IAAI,CAAC;IACbE,QAAQ,CAAC,IAAI,CAAC;IACdM,YAAY,CAACM,UAAU,CAAC,UAAU,CAAC;IACnCN,YAAY,CAACM,UAAU,CAAC,WAAW,CAAC;IACpCX,QAAQ,CAAC,QAAQ,CAAC;EACpB,CAAC;;EAED;EACA,MAAMY,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAMC,UAAU,GAAGR,YAAY,CAACS,OAAO,CAAC,UAAU,CAAC;IACnD,MAAMC,WAAW,GAAGV,YAAY,CAACS,OAAO,CAAC,WAAW,CAAC;IACrD,IAAID,UAAU,IAAIE,WAAW,EAAE;MAC7BlB,OAAO,CAACU,IAAI,CAACS,KAAK,CAACH,UAAU,CAAC,CAAC;MAC/Bd,QAAQ,CAACgB,WAAW,CAAC;IACvB;EACF,CAAC;EAED,oBACExB,OAAA,CAACC,WAAW,CAACyB,QAAQ;IAACC,KAAK,EAAE;MAAEtB,IAAI;MAAEE,KAAK;MAAEG,KAAK;MAAES,MAAM;MAAEE;IAAoB,CAAE;IAAAlB,QAAA,EAC9EA;EAAQ;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC3B,EAAA,CA3CWF,YAAY;EAAA,QAGNJ,WAAW;AAAA;AAAAkC,EAAA,GAHjB9B,YAAY;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}